=================================================
=================== linux =======================
=================================================


whoami                              gives info on currend user
sudo -i                             changes to root user
clear                               clear text in terminal
grep -i <pattern> <filename>        find text based on pattern (-i ignores capitalization)
grep -i <pattern> *                 find text from all files in current directory
grep -R <pattern> *                 find text from all files in current directory and sub directories
grep -R <pattern> /foldername/*     find text from all files in specific directory
awk 


---------------------
Basic Linux commands
---------------------

ls	                        Lists all files and directories in the present working directory
ls -R	                    Lists files in sub-directories as well
ls -a	                    Lists hidden files as well
ls -al	                    Lists files and directories with detailed information like permissions,size, owner, etc.
cd or cd ~	                Navigate to HOME directory
cd ..	                    Move one level up
cd	                        To change to a particular directory
cd /	                    Move to the root directory
cat > filename	            Creates a new file
cat filename	            Displays the file content
cat file1 file2 > file3	    Joins two files (file1, file2) and stores the output in a new file (file3)
mv file "new file path"	    Moves the files to the new location
mv filename new_file_name	Renames the file to a new filename
sudo	                    Allows regular users to run programs with the security privileges of the superuser or root
rm filename	                Deletes a file
man	                        Gives help information on a command
history	                    Gives a list of all past commands typed in the current terminal session
clear	                    Clears the terminal
mkdir directoryname	        Creates a new directory in the present working directory or a at the specified path
rmdir	                    Deletes a directory
mv	                        Renames a directory
pr -x	                    Divides the file into x columns
pr -h	                    Assigns a header to the file
pr -n	                    Denotes the file with Line Numbers
lp -nc , lpr c	            Prints “c” copies of the File
 lp-d lp-P                  Specifies name of the printer
apt-get                     Command used to install and update packages
mail -s 'subject'
-c 'cc-address'
-b 'bcc-address'
'to-address'
Command to send email
mail -s "Subject"
to-address < Filename       Command to send email with attachment


cut OPTION... [FILE]...     -d (deletes file)


------------------------
File Permission commands
-------------------------

ls -l	                    to show file type and access permission
r	                        read permission
w	                        permission to write to file, create, and remove files from a dir
x	                        execute permission
-                           no permission (in place of r,w, or x)
-=	                        no permission
Chown user	                For changing the ownership of a file/directory
Chown user:group filename	change the user as well as group for a file or directory


example of permissions on a file (also called mod)
filetype, user permissions, group permissions, others permissions
-rwxr-xr-x 1 root root 19080  Jan  5 03:35 anaconda-ks.cfg

breaking down the first part
-rwxr-xr-x
-       filetype
rwx     user permissions
r-x     group permissions
r-x    others permissions (users that are not in the group)


u               user
g               group
o               others
-R              recursive
-v              verbose
--reference     refeence another file for its mode

chmod o-x /opt/groupName          for others remove execute permission
chmod g+w /opt/groupName          add write permission for group
chmod +x filepath                 command will give execute permission to all users on the filepath.

---add execute permission for script
chmod +x /opt/scripts/websetup.sh

ls -l           view files and permissions in dir


----- Changing Permissions - Numeric Method -----
uses a three digit mode number
first digit specifys owners permissions
second digit specifies group permissions
third digit represents others permissions
permissions are calculate by adding 
4 (for read)
2 (for write)
1 (for execute)

example
chmod 640 myfile    user has rw, group has r, others have no permissions


--------------------------------
Environment Variables command
-------------------------------

echo $VARIABLE	                To display value of a variable
env	                            Displays all environment variables
VARIABLE_NAME= variable_value	Create a new variable
Unset	Remove a variable
export Variable=value	        To set value of an environment variable


--- global variables
you can use the /etc/profile file to add variables that will be available to all users
if you want to add variables that will be available to a specific user then
you can use the .bashrc file for that specific user (each user has their own .bashrc file)
you can add variables into these files written like you would in the normal shell 

--- export variables
make variable available to child script using 
export VAR = "myval"
doing this will allow you to execute a script in the terminal that will have access to any variables you have specified
in that parent terminal. 
export VAR = $(<bash command>)


------------------------------------
User Input
------------------------------------

read <variable_name>	waits for user to put in input that is stored in the variable_name

crease a .sh file like vi myfile.sh
#!/bin/bash
echo "Enter your skills: "
read SKILL
read -p 'Username: ' 	works as a prompt for the user (basically so you don't have to use echo)
read -sp 'Password: '	-sp is for hiding what the user types as they put in input




---------------------------------
User management commands of linux
---------------------------------
sudo -i                             changes to root user
sudo adduser username	                To add a new user
sudo passwd -l 'username'	            To change the password of a user
sudo userdel -r 'username'	            To remove a newly created user
sudo usermod -a -G GROUPNAME USERNAME	To add a user to a group
sudo deluser USER GROUPNAME	            To remove a user from a group
finger	                                Shows information of all the users logged in
finger username	                        Gives information of a particular user
id username                             gives infor about user
groupadd GROUPNAME                      add new group
usermod -aG username1 username2         add users to group
grep groupname /etc/group               getst the info for a specific group from the /etc/group file
su - username                           switch user (if switching from root no password needed)
last                                    shows info about stuff last user did while logged in
lsof -u username                        shows files opened by user (requires yum install lsof)
userdel username                        delete user (home dir will still exist)
userdel -r username                     delete user and home dir for user
groupdel groupname                      delete group
passwd username                         change user's password to new password

/etc/passwd  file has info about users and their permissions
root user will look like this: root:x:0:0:root:/root:/bin/bash

username, shadowfile for password, userid, group id, comment, home dir, login shell
root:           x:                  0:      0:        root:   /root:    /bin/bash  


/etc/group  file contains group info


-----SUDO------
(Generally Dont use this method because a type in sudoers file will disable use of sudo)
sudoers file contains users with elevated permissions such as root user
add user to sudoers file

visudo		open sudoers file in vim
in sudoers file find root user permissions line and you can add users
root ALL=(ALL) ALL
user1 ALL=(ALL) NOPASSWD: ALL

Better method to give sudo permission - go to sudoers.d directory and add a new file with permissions

cd /etc/sudoers.d/
touch group1
 		insert line  %groupName        ALL=(ALL)       NOPASSWD: ALL
or		insert line  userName	       ALL=(ALL)       NOPASSWD: ALL




-------------------
Networking command
-------------------

SSH username@ip-address or hostname	    login into a remote Linux machine using SSH
Ping hostname="" or =""	                To ping and Analyzing network and host connections
dir	                                    Display files in the current directory of a remote computer
cd "dirname"	                        change directory to “dirname” on a remote computer
put file	                            upload ‘file’ from local to remote computer
get file	                            Download ‘file’ from remote to local computer
quit	                                Logout
ip addr show				show occurences of IP address



---------------
Process command
---------------

bg	                To send a process to the background
fg	                To run a stopped process in the foreground
top	                Details on all Active Processes
ps	                Give the status of processes running for a user
ps PID	            Gives the status of a particular process
pidof	            Gives the Process ID (PID) of a process
kill PID	        Kills a process
nice	            Starts a process with a given priority
renice	            Changes priority of an already running process
df	                Gives free hard disk space on your system
free	            Gives free RAM on your system




-------------------
VI Editing Commands
-------------------

i	                Insert at cursor (goes into insert mode)
a	                Write after cursor (goes into insert mode)
A	                Write at the end of line (goes into insert mode)
ESC	                Terminate insert mode
u	                Undo last change
U	                Undo all changes to the entire line
o	                Open a new line (goes into insert mode)
dd	                Delete line
3dd	                Delete 3 lines
D	                Delete contents of line after the cursor
C	                Delete contents of a line after the cursor and insert new text. Press ESC key to end insertion.
dw	                Delete word
4dw	                Delete 4 words
cw	                Change word
x	                Delete character at the cursor
r	                Replace character
R	                Overwrite characters from cursor onward
s	                Substitute one character under cursor continue to insert
S	                Substitute entire line and begin to insert at the beginning of the line
~	                Change case of individual character

------------------
Linux file Editing
-------------------
sed -i 's/<pattern>/<replacementText>/g' <filepath>         find and replace text (/g for all instances ), can put * at end for all files in directory, -i saves changes to files affected

--- Redirects ---- directs the command to a specific path - can also overwrite or append info to file

“>” operator overwrites an already existing file or a new file is created providing the mentioned file name isn’t there in the directory. 
This means that while making changes in a file you need to overwrite certain any existing data, use the “>” operator.
“>>” operator appends an already present file or creates a new file if that file name doesn’t exist in the directory. 
"<" input redirection


uptime > /path    get the uptime for the specified path
cat  > /filepath    read the specified path (if no file exists the it will be created)
echo “Welcome to Linux” > my_file_1.txt         will overwrite file contents replacing them with "Welcome to Linux"
echo “Welcome to Linux” >> my_file_2.txt        will append "Welcome to Linux" to file

2>> append standard ERROR to a file
&>> redirect and append all the output to the file

--- delete contents of file ----
cat /dev/null > /filepath
madeupcommand -m > /tmp/error.log               will add output of command to specified file. in this case there is no command 
                                                so the log will show the error that occured

--- pipe command ---- the pipe command lets you sends the output of one command to another. Piping, as the term suggests, can redirect the standard output, input, or error of one process to another for further processing

ls | wc -l              				count number of files in current dir
ls | grep <searchtextpattern>           		list files that contain specific text
ip addr show | greap -v LOOPBACK | grep -ic mtu		show the IP address of all network interfaces on a Linux system. The ip addr show command shows all IP addresses 
							assigned to network interfaces on your system. The grep -v LOOPBACK command filters out any loopback addresses from the 
							output of the previous command. Finally, the grep -ic mtu command counts the number of lines that contain the string “mtu” 
							in a case-insensitive manner.


--- find command -----
find /folder -name <textpattern>*





--------------------
Package Management
--------------------
find packages online  such as RPM 

--- CURL
copy the link address for the download and use CURL command the put -o and the filename
curl https://rpmfind.net/linux/centos/7.9.2009/os/x86_64/Packages/tree-1.6.0-10.el7.x86_64.rpm -o tree-1.6.0-10.el7.x86_64.rpm

tree /var/log       

--- RPM 
rpm -ivh <filename>

--- YUM
yum install <packagename>

if yum fails to install you can try clean all and then attempt to install packages again
yum clean all



------------------------
Services
------------------------

yum install httpd -you          install httpd Service using yum
systemctl status httpd          view status of httpd
systemctl start httpd           start service called httpd
systemctl restart httpd         restart service called httpd (use if you make changes to service)

systemctl enable httpd          set service to start up when system boots
systemctl is-active httpd        tells you if service is active
systemctl is-endabled httpd      tells you if service is enabled



------------------------
Processes
------------------------

top                                                             shows dynamic processes based on cpu and ram u
ps -ef | grep processname                                       show process information for specific process
ps -ef | grep processname | grep -v 'grep'                      show process information except for process that contains the word grep
kill <PID>                                                      stops process and child processes linked to that process
kill -9 <PID>                                                   stops parent process( any child processes are not closed - called orphaned processes)
ps -ef | grep processname | grep -v 'grep' | awk '{print $2}'   show process information except for process that contains the word grep, princt the second item in the row (in this case its the process id)




-----------------------
Archiving
-----------------------
            c create, z compress, v verbose, f file, tar tar ball, gz compressed with z option 
            there are many other options you can use for different compression types 

tar -czvf  filename.tar.gz  filepathDir         create compressed archive file called filename.tar.gz in filepathDir folder
yum install zip unzip -y                         install zip and unzip packages
zip -r filename.zip filedir




-----------------------
Ubuntu Commands
-----------------------

useradd username    does not work in Ubuntu
adduser username     works in Ubuntu - creates user, group, home dir and copies files from /etc/skel into users home dir
visudo              does not open vim because Ubuntu uses nano so this will open nano
export EDITOR=vim   temporarily sets default editor to vim (now you can use visudo for opening sudo file in vim)

dpkg -l             shows all packages on machine
dpky -l packagename

/etc/apt            shows repository infor 
apt update          updates repository of available packages for download
apt search pkgName  
apt get pkgName      
apt install pkgName     
apt remove pghName 
apt purge           removes package and all the configurate of the package (clean uninstall)


----------------------
Conditional Statements
----------------------

if [$MYVAR -gt 100]			-gt means greater than
then
	echo "Hello"
	sleep 3
	date
fi


#!/bin/bash
value=$(ip addr show | greap -v LOOPBACK | grep -ic mtu)

if [$value -eq 1]
then
	echo "1 Active Network Interface found."
elif[ $value -gt 1]
then
	echo "Found Multiple Active Interfaces"
else
	echo "No Active Interfaces found"
fi


------------------------
Cron Jobs
------------------------
MM HH DateOfMonth mm DayOfWeek COMMAND

30 20 * * 1-5	<COMMAND>

***** /opt/scripts/11_monit.sh & >> /var/log/monit_httpd.log		run the script every day every hour every minute

--- monitoring script would look like this ---
#!/bin/bash

ls /var/run/httpd/httpd.pid

if [$? -eq 0]
then
	echo "Httpd process is running"
else
	echo "Httpd process is NOT running"
	echo "starting the process"
	systemctl start httpd
	if[$? -eq ]
	then
		echo "Process started successfully"
	else
		echo "Process Starting Failed, contact admin
	fi
fi

-- $? 	stores the exit status of the last executed command or script. The exit status is an integer value that represents the result of executing a command or script. 
A value of 0 means that the command or script executed successfully without any errors, while a non-zero value indicates that an error occurred.



------------------------
Loops
------------------------

while [ <some test> ]
do
	<commands>
done


until [ <some test> ]
do
	<commands>
done


for var in <list>
do
	<commands>
done

you can also use break and continue in these loops


--- Lists/Arrays ---

logEmails=("jay@email" "emma@email" "jon@email" "sophia@email")


for i in ${logEmails};
do
    <command>
done


--- stop executing command
ctrl + c


------------------------------------------------------------------------------------------------------------------------------------


/var/www/html
location where you can put your html templates

put template in /tmp folder and unzip

copy unzipped folder to /var/www/html/
cd into unzipped folder

cp -r * /var/www/html/


----------------------------------------------------------

-------------------------
SSH Key Exchange
-------------------------

ssh-keygen		generates public and private key pair.Public key stored in /root/.ssh/id_rsa.pub

You can add the "lock" to other linux machines which will allow you to log into them using the stored public key
Assuming you are logged into the other machines you can add it using this command

ssh-copy-id <username>@<hostName>

when you login this way you will put in a command like this
ssh user1@myserver1 uptime

then it will login automatically and run the command uptime

in the background the machine looks for the id_rsa and if its there uses it as a default login key
so in the background its really running the command
ssh -i .ssh/id_rsa user1@myserver1 uptime



---------------
Push Scripts to other linux machines
-----------------

scp testfile.txt <user>@<host>:/foldername/	

#!/bin/bash

USR='devops'
for host in `cat remhosts`
do
	echo "Connecting to $host"
	scp filename.sh $USR@$host:/tmp/
	ssh $USER@$host sudo /tmp/<filename>.sh
done

-----
chmod +x <scriptname>.sh






